package com.liminghuang.route.gen;

import com.liminghuang.route.abstraction.module.IRouteModule;
import com.liminghuang.route.model.RouteModuleAnnotatedClass;
import com.liminghuang.route.model.RouteTargetAnnotatedClass;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;

import java.util.Date;
import java.util.List;

import javax.annotation.processing.Messager;
import javax.lang.model.element.Modifier;
import javax.lang.model.util.Elements;
import javax.tools.Diagnostic;
import javax.tools.FileObject;

/**
 * ProjectName: AOP
 * Description: 模块代理类生成.
 * CreateDate: 2020/6/10 7:53 PM
 *
 * @author: <a href="mailto:liming.huang@tuya.com"">colin</a>
 * @version: 3.18.0
 * @since: 3.18.0
 */
public class ModuleProxyGenerator {
    private RouteModuleAnnotatedClass moduleAnnClz;
    private List<RouteTargetAnnotatedClass> targetAnnClzs;
    private Elements elementUtils;
    private Messager messager;

    public ModuleProxyGenerator(RouteModuleAnnotatedClass moduleAnnClz,
                                List<RouteTargetAnnotatedClass> targetAnnClzs,
                                Elements elementUtils, Messager messager) {
        this.moduleAnnClz = moduleAnnClz;
        this.targetAnnClzs = targetAnnClzs;
        this.elementUtils = elementUtils;
        this.messager = messager;
    }

    public JavaFile generate() {
        // 字段
        FieldSpec.Builder targetBuilder = FieldSpec.builder(Types.CLZ_IROUTE_MODULE, "target", Modifier.PRIVATE);
        // 构造器
        MethodSpec.Builder constructorBuilder = MethodSpec.constructorBuilder();
        constructorBuilder.addModifiers(Modifier.PUBLIC).
                addParameter(Types.CLZ_IROUTE_MODULE, "target")
                .addStatement("this.target = target");

        String collectorClzName = Types.ROUTE_TABLE_PREFIX + moduleAnnClz.getModuleInfo().getDomain();
        String collectorPkgName =
                elementUtils.getPackageOf(moduleAnnClz.getClassElement()).getQualifiedName().toString();
        // collectRules方法
        MethodSpec.Builder collectRulesBuilder = MethodSpec.methodBuilder("collectRules");
        collectRulesBuilder.addModifiers(Modifier.PUBLIC)
                .addAnnotation(Override.class)
                .returns(Types.TYPE_LIST_OF_ROUTE_RULE)
                .addJavadoc("This method is generated by apt at $S, do not edit.",
                        new Date().toString())
                .addStatement("$T list = new $T<>()", Types.TYPE_LIST_OF_ROUTE_RULE, Types.CLZ_ARRAY_LIST)
                .addStatement("$T collector =($T) new $T()", Types.CLZ_IROUTE_COLLECTOR, Types.CLZ_IROUTE_COLLECTOR,
                        ClassName.get(collectorPkgName, collectorClzName))
                .addStatement("list.addAll(collector.collectRules())")
                .addStatement("list.addAll(target.collectRules())")
                .addStatement("return list");

        // collectExtRules方法
        MethodSpec.Builder collectExtRulesBuilder = MethodSpec.methodBuilder("collectExtRules");
        collectExtRulesBuilder.addModifiers(Modifier.PUBLIC)
                .addAnnotation(Override.class)
                .returns(Types.TYPE_LIST_OF_ROUTE_RULE)
                .addJavadoc("This method is generated by apt at $S, do not edit.",
                        new Date().toString())
                .addStatement("return target.collectExtRules()");

        // authority方法
        MethodSpec.Builder authorityBuilder = MethodSpec.methodBuilder("authority");
        authorityBuilder.addModifiers(Modifier.PUBLIC)
                .addAnnotation(Override.class)
                .returns(Types.CLZ_STRING)
                .addJavadoc("This method is generated by apt at $S, do not edit.",
                        new Date().toString())
                .addStatement("return target.authority()");

        // generate whole class
        String generateClzName = moduleAnnClz.getModuleInfo().getSimpleName() + Types.ROUTE_MODULE_SUFFIX;
        messager.printMessage(Diagnostic.Kind.NOTE, String.format("start to generate class-{%s}",
                generateClzName));
        TypeSpec moduleProxyClz =
                TypeSpec.classBuilder(generateClzName)
                        .addModifiers(Modifier.PUBLIC)
                        .addSuperinterface(Types.CLZ_IROUTE_MODULE)
                        .addJavadoc("This class is generated by apt at $S, do not edit.",
                                new Date().toString())
                        .addField(targetBuilder.build())
                        .addMethod(constructorBuilder.build())
                        .addMethod(collectRulesBuilder.build())
                        .addMethod(collectExtRulesBuilder.build())
                        .addMethod(authorityBuilder.build())
                        .build();

        String packageName = elementUtils.getPackageOf(moduleAnnClz.getClassElement()).getQualifiedName().toString();
        messager.printMessage(Diagnostic.Kind.NOTE, String.format("class-{%s} will be generate at(pkg same " +
                        "as %s): %s",
                generateClzName, moduleAnnClz.getModuleInfo().getSimpleName(), packageName));
        // generate file
        return JavaFile.builder(packageName, moduleProxyClz).build();
    }
}
